import pandas as pd
import argparse
import os
import json
import subprocess

def run_pipeline(args,i):
    cmd="""python scripts/prep_for_simulations.py --sim-unique-genos {0} 
    						--bed-files {1} 
    						--h2g .8  
						--varbeta-path {2}""".format(str(i),args.bed_files+str(i),args.varbeta_files)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate() 
    p.wait()

    cmd="""python scripts/sim_pheno.py --sim-unique-genos {0} 
    				--make-score-files 
				--varbeta-files {1} 
				--num-sims {4}
    				--bed-files {2} 
				--out-folder {3}""".format(str(i),args.varbeta_files+str(i),args.bed_files+str(i),args.score_folder,args.num_sims)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate() 
    p.wait()
 
    cmd="""python scripts/sim_pheno.py --sim-unique-genos {0}
    				--get-plink-profiles
				--score-folder {1}
				--num-sims {4} 
				--out-folder {2}
				--bed-files {3}""".format(str(i),args.score_folder,args.plink_profile_folder,args.bed_files+str(i),args.num_sims)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate() 
    p.wait()

    cmd="""python scripts/sim_pheno.py --num-sims {5}
    				--sim-unique-genos {0}
				--bed-files {1}
    				--profile-folder {2}
				--h2g-file {3}
				--out-folder {4} 
				--compute-pheno""".format(str(i),args.bed_files+str(i),args.plink_profile_folder,args.h2g_file,args.pheno_folder,args.num_sims)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate()
    p.wait()
 
    cmd="""python scripts/compute_sumstats.py --num-sims {4}
    				--sim-unique-genos {0}
				--pheno-folder {1}
    				--out-folder {2}
				--bed-files {3}
				--compute-ss""".format(str(i),args.pheno_folder,args.qassoc_folder,args.bed_files+str(i),args.num_sims)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate()
    p.wait()
    
    cmd="""python scripts/compute_sumstats.py --format-ss
    					--sim-unique-genos {0}
					--qassoc-folder {1}
    					--bim-files {2} 
					--num-sims {4}
					--out-folder {3}""".format(str(i),args.qassoc_folder,args.bed_files+str(i),args.sumstats_files,args.num_sims)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate()
    p.wait()
    
    cmd="""python scripts/prune_sumstats.py --sumstats {0} 
    					--assoc-snp-files {1} 
    					--sim-unique-genos {2} 
					--num-sims {3} """.format(args.sumstats_files,args.assoc_snp_files,str(i),args.num_sims)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate()
    p.wait()
    
    cmd="""python ../scripts/run_inrich.py --sumstats {0}
    				--assoc-snps {1}
				--geneset-list {2}
				--ref-bim {3}
				--inrich-results {4}
				--num-sims {5}""".format(args.sumstats_files+'sim'+str(i),
							args.assoc_snp_files+'sim'+str(i),
							args.full_geneset_list, args.bed_files+str(i),args.inrich_results,args.num_sims)
    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate()
    p.wait()
    
    cmd="""python ../scripts/munge_results.py --geneset-list {0}
    				--in-path {1}
				--out-path {2}
				--num-sims {5}
				--inrich-path {3}
				--phenotypes {4}""".format(args.unique_geneset_list,args.ldsc_files,
							args.meta_analysis_files,args.inrich_results,
							'sim'+str(i),args.num_sims)

    p = subprocess.Popen(cmd.split(), shell=False)
    p.communicate()
    p.wait()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--json', help = 'json file for simulations')


    args = parser.parse_args()
    args_dict = vars(args)
    d = json.load(open(args.json))
    args_dict.update(d)

    for i in range(args.num_genotype_sims):
        run_pipeline(args,i)
